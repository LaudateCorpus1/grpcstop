// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package main

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GrpcStopClient is the client API for GrpcStop service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GrpcStopClient interface {
	Stop(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	Wait(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type grpcStopClient struct {
	cc grpc.ClientConnInterface
}

func NewGrpcStopClient(cc grpc.ClientConnInterface) GrpcStopClient {
	return &grpcStopClient{cc}
}

func (c *grpcStopClient) Stop(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/GrpcStop/Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcStopClient) Wait(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/GrpcStop/Wait", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GrpcStopServer is the server API for GrpcStop service.
// All implementations must embed UnimplementedGrpcStopServer
// for forward compatibility
type GrpcStopServer interface {
	Stop(context.Context, *Empty) (*Empty, error)
	Wait(context.Context, *Empty) (*Empty, error)
	mustEmbedUnimplementedGrpcStopServer()
}

// UnimplementedGrpcStopServer must be embedded to have forward compatible implementations.
type UnimplementedGrpcStopServer struct {
}

func (UnimplementedGrpcStopServer) Stop(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedGrpcStopServer) Wait(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Wait not implemented")
}
func (UnimplementedGrpcStopServer) mustEmbedUnimplementedGrpcStopServer() {}

// UnsafeGrpcStopServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GrpcStopServer will
// result in compilation errors.
type UnsafeGrpcStopServer interface {
	mustEmbedUnimplementedGrpcStopServer()
}

func RegisterGrpcStopServer(s grpc.ServiceRegistrar, srv GrpcStopServer) {
	s.RegisterService(&GrpcStop_ServiceDesc, srv)
}

func _GrpcStop_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcStopServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GrpcStop/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcStopServer).Stop(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcStop_Wait_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcStopServer).Wait(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GrpcStop/Wait",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcStopServer).Wait(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// GrpcStop_ServiceDesc is the grpc.ServiceDesc for GrpcStop service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GrpcStop_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "GrpcStop",
	HandlerType: (*GrpcStopServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Stop",
			Handler:    _GrpcStop_Stop_Handler,
		},
		{
			MethodName: "Wait",
			Handler:    _GrpcStop_Wait_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpcstop.proto",
}
